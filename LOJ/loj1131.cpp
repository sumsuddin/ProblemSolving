#include<cstdio>
#include<cmath>
typedef long ind;
long a,b,c,i,j,k;
ind M[6][6],F[6][6],D[6][6],FF[6][6],s,m;
void check(long n)
{
	if(n<2)
		return ;

	if(n%2==0)
		check(n/2);
	else
		check(n-1);
	if(n%2==0)
	{
		for(i=0;i<6;i++)
		{
			for(j=0;j<6;j++)
			{
				s=0;
				for(k=0;k<6;k++)
				{
					s+=(M[i][k]*M[k][j])%m;
					s=s%m;
				}
				D[i][j]=s%m;
			}
		}
	}
	else
	{
		for(i=0;i<6;i++)
		{
			for(j=0;j<6;j++)
			{
				s=0;
				for(k=0;k<6;k++)
				{
					s+=(M[i][k]*F[k][j])%m;
					s=s%m;
				}
				D[i][j]=s%m;
			}
		}
	}
	for(i=0;i<6;i++)
		for(j=0;j<6;j++)
			M[i][j]=D[i][j];
}



int main()
{
	long t,n,cs=1,a1,a2,b1,b2,c1,c2,f[6],g[6],q;
	scanf("%ld",&t);
	while(t--)
	{
		scanf("%ld%ld%ld",&a1,&b1,&c1);
		scanf("%ld%ld%ld",&a2,&b2,&c2);
		scanf("%ld%ld%ld",&f[0],&f[1],&f[2]);
		scanf("%ld%ld%ld",&g[0],&g[1],&g[2]);
		scanf("%ld",&m);

		printf("Case %ld:\n",cs++);
		scanf("%ld",&q);
		while(q--)
		{
			scanf("%ld",&n);
			if(n<=2)
			{
				printf("%ld %ld\n",f[n]%m,g[n]%m);
				continue;
			}

			M[0][0]=a1; M[0][1]=b1; M[0][2]=0; M[0][3]=0; M[0][4]=0; M[0][5]=c1; 
			M[1][0]=1;  M[1][1]=0;  M[1][2]=0; M[1][3]=0; M[1][4]=0; M[1][5]=0;
			M[2][0]=0;  M[2][1]=1;  M[2][2]=0; M[2][3]=0; M[2][4]=0; M[2][5]=0;
			M[3][0]=0; M[3][1]=0; M[3][2]=c2; M[3][3]=a2; M[3][4]=b2; M[3][5]=0; 
			M[4][0]=0;  M[4][1]=0;  M[4][2]=0; M[4][3]=1; M[4][4]=0; M[4][5]=0;
			M[5][0]=0;  M[5][1]=0;  M[5][2]=0; M[5][3]=0; M[5][4]=1; M[5][5]=0;			


			F[0][0]=a1; F[0][1]=b1; F[0][2]=0; F[0][3]=0; F[0][4]=0; F[0][5]=c1; 
			F[1][0]=1;  F[1][1]=0;  F[1][2]=0; F[1][3]=0; F[1][4]=0; F[1][5]=0;
			F[2][0]=0;  F[2][1]=1;  F[2][2]=0; F[2][3]=0; F[2][4]=0; F[2][5]=0;
			F[3][0]=0; F[3][1]=0; F[3][2]=c2; F[3][3]=a2; F[3][4]=b2; F[3][5]=0; 
			F[4][0]=0;  F[4][1]=0;  F[4][2]=0; F[4][3]=1; F[4][4]=0; F[4][5]=0;
			F[5][0]=0;  F[5][1]=0;  F[5][2]=0; F[5][3]=0; F[5][4]=1; F[5][5]=0;	


			check(n-2);


			printf("%ld ",(((M[0][0]*f[2])%m)+((M[0][1]*f[1])%m)+((M[0][2]*f[0])%m)+((M[0][3]*g[2])%m)+((M[0][4]*g[1])%m)+((M[0][5]*g[0])%m))%m);

			printf("%ld\n",((M[3][5]*g[0])%m+(M[3][3]*g[2])%m+(M[3][4]*g[1])%m+(M[3][2]*f[0])%m+(M[3][1]*f[1])%m+(M[3][0]*f[2])%m)%m);
		}
		
	}
	return 0;
}